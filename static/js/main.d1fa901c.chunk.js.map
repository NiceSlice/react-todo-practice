{"version":3,"sources":["components/Header.js","components/Todo.js","components/SaveButton.js","components/TodoItem.js","components/TodoContainer.js","components/Layout.js","App.js","serviceWorker.js","index.js","components/logo.svg"],"names":["Header","react_default","a","createElement","className","src","logo","this","props","children","React","Component","Todo","type","placeholder","maxLength","onChange","value","SaveButton","onClick","saveToDo","TodoItem","state","isChecked","toggleCheckbox","_this","setState","deleteItem","todo","id","text","TodoContainer","event","components_Todo","inputValue","components_SaveButton","Layout","ToDos","idCounter","target","concat","Object","toConsumableArray","filter","_this2","components_Header","components_TodoContainer","map","components_TodoItem","key","events","date","Date","Event","App","components_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d1fa901c.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\n\n\nclass Header extends React.Component{\n\n    render(){\n        return(\n            <div className=\"header\">\n                <a>\n                <img src={logo} className=\"logo\" />\n                </a>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from \"react\";\n\nclass Todo extends React.Component{\n    \n    render(){\n        return(\n            <input type=\"text\" placeholder=\"ToDo...\" maxLength=\"100\" onChange={this.props.onChange} value={this.props.value} className=\"todo\" />\n        )\n    }\n}\n\nexport default Todo;","import React from \"react\";\n\nclass SaveButton extends React.Component{\n\n    render(){\n        return(\n            <button onClick={this.props.saveToDo} className=\"save-button\" >Save</button>\n        )\n    }\n}\n\nexport default SaveButton;","import React from \"react\";\n\n\nclass TodoItem extends React.Component{\n    state = {\n        isChecked: false\n    }\n\n    toggleCheckbox = () => {\n        this.setState({ isChecked: !this.state.isChecked })\n    }\n\n    deleteItem = () => {\n        this.props.deleteItem(this.props.todo.id)\n    }\n\n\n\n    render(){\n        if(this.state.isChecked){\n            return(\n                <div className=\"todo-item\" >\n\n                <p className=\"crossed\">\n                {this.props.todo.text}\n\n                <button\n                onClick={this.deleteItem}\n                className=\"checkbox\">×</button>\n\n                <input type=\"checkbox\" className=\"checkbox\" onClick={this.toggleCheckbox}></input>\n                </p>\n\n                {this.props.children}\n            </div>\n            )\n        }\n        return(\n            <div className=\"todo-item\" >\n                <p>\n                {this.props.todo.text}\n\n                <button\n                onClick={this.deleteItem}\n                className=\"checkbox\">×</button>\n\n                <input type=\"checkbox\" className=\"checkbox\" onClick={this.toggleCheckbox}></input>\n                </p>\n\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default TodoItem;","import React from \"react\";\nimport Todo from \"./Todo\";\nimport SaveButton from \"./SaveButton\";\nimport TodoItem from \"./TodoItem\";\n\nclass TodoContainer extends React.Component{\n\n    onChange = event => {\n        this.props.onChange(event);\n    }\n\n    saveToDo = () => {\n        this.props.saveToDo();\n    }\n\n    render(){\n        return(\n            <div className=\"todo-container\">\n                <Todo onChange={this.onChange} value={this.props.inputValue} />\n                <SaveButton saveToDo={this.saveToDo} />\n\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default TodoContainer;","import React from \"react\";\nimport Header from \"./Header\";\nimport TodoContainer from \"./TodoContainer\";\nimport TodoItem from \"./TodoItem\";\n\nclass Layout extends React.Component{\n    state = {\n        inputValue: \"\",\n        ToDos: [],\n        idCounter: 1\n    }\n\n    onChange = event => {\n        this.setState({ inputValue: event.target.value })\n    }\n\n    saveToDo = () => {\n        if(this.state.inputValue){\n            this.setState({ inputValue: \"\",\n            ToDos: [ ...this.state.ToDos, {id: this.state.idCounter, text: this.state.inputValue} ],\n            idCounter: this.state.idCounter + 1 })\n        }\n    }\n\n    \n    deleteItem = id => {\n        this.setState({ ToDos: this.state.ToDos.filter(todo => todo.id !== id) })\n    }\n    \n\n\n\n    render(){\n        return(\n            <div className=\"container\">\n                <Header></Header>\n\n                <TodoContainer saveToDo={this.saveToDo} onChange={this.onChange} inputValue={this.state.inputValue} ></TodoContainer>\n\n                {this.state.ToDos.map(todo => <TodoItem\n                    deleteItem={this.deleteItem}\n                    key={todo.id}\n                    todo={todo} />)}\n\n            {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default Layout;","import React from 'react';\n\nimport Calendar from \"react-dates-lite\";\nimport Pagination from \"@kiwicom/orbit-components/lib/Pagination\";\n\nimport Layout from \"./components/Layout\";\n\nimport './App.css';\n\n\n\nconst events = [\n  {id: \"1\", date: new Date(\"July 11, 2019\"), event: \"event1\"},\n  {id: \"2\", date: new Date(\"July 12, 2019\"), event: \"event2\"},\n  {id: \"3\", date: new Date(\"July 13, 2019\"), event: \"event3\"},\n  {id: \"4\", date: new Date(\"July 14, 2019\"), event: \"event4\"}\n]\n\nclass Event extends React.Component {\n\n  render(){\n    return(\n      <center>\n      <p>{this.props.event}</p>\n      </center>\n    )\n  }\n}\n\n\nclass CalendarContainer extends React.Component {\n\n  state = {\n    selectedDates: []\n  }\n  selectDates = (dates) => {\n    this.setState({ selectedDates: dates })\n  }\n\n  render() {\n\n    const filteredEvents = events.filter(event =>\n      this.state.selectedDates.find(date => date.getTime() === event.date.getTime()\n      )\n    )\n\n    return (\n      <div>\n        <Layout>\n\n        <Calendar\n        visibleMonths={1}\n        firstMonth={new Date(2019, 1, 1)}\n        lastMonth={new Date(2019, 12, 1)}\n        selectedDates={this.state.selectedDates}\n        selectDates={this.selectDates}\n        rangeSelect\n        className=\"calendar\"\n        />\n        \n\n        {filteredEvents.map(FilteredEvent =>\n          <Event key={FilteredEvent.id} event={FilteredEvent.event} />)}\n        </Layout>\n      </div>\n    );\n  \n  }\n}\n\n\nclass App extends React.Component{\n\n  render(){\n    return(\n      <div>\n        <Layout>\n        </Layout>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.889e63b0.svg\";"],"sourceRoot":""}